---
description: 
globs: 
alwaysApply: false
---
---

description: Flutter画面におけるモード状態の管理と画面構造分離の方針
ruleType: Auto Attached
globs:

* lib/main.dart
* lib/screens/\*.dart
* lib/widgets/\*.dart

---

## 🧠 モード状態管理方針

* アプリは2つの主モード（Generate / Scan）を持つ：

  ```dart
  enum ScreenMode {
    generate,
    scan,
  }
  ```
* `StatefulWidget` の中で `ScreenMode _mode` を保持し、`setState` により切り替える。
* Scan モード内ではさらに "カメラプレビュー" と "画像からスキャン" のサブモードがある：

  ```dart
  bool isPhotoMode = false;
  ```
* `isPhotoMode` の切り替え例：

  ```dart
  ElevatedButton(
    onPressed: () => setState(() {
      isPhotoMode = !isPhotoMode;
    }),
    child: Text(isPhotoMode ? 'Scan from Camera' : 'Scan from Photos'),
  );
  ```

## 🧩 UIコンポーネント設計指針

* 画面全体は2つの `Screen` に分ける：

  * `generate_screen.dart`
  * `scan_screen.dart`
* 各画面は以下のコンポーネントを含む：

  * QR表示領域（`QrDisplayWidget`）
  * 入力領域または読み取り状態表示（`TextInputArea`, `ScanStatusText`）
  * アクションボタン列（`ModeSwitchButtons`）

## 📐 命名規則と構造

* Widget名は PascalCase で `.dart` ファイルと一致させる

  * 例：`class QrDisplayWidget` → `qr_display_widget.dart`
* `widgets/` 以下に再利用可能な部品を配置し、各画面から `import` する
* 状態を保持しないコンポーネントは `StatelessWidget` を基本とする
* 状態を持つ画面には `StatefulWidget` を使い、`setState()` で即時反映する

## 📋 実装補足

* TextField の `onChanged` により `qrData` を即時更新 → `QrImage` にバインド
* `Scan from Photos` ⇄ `Scan from Camera` は `isPhotoMode` のトグルで切り替え
* 各モードの切り替え操作後は `setState()` により画面を即座に更新
* エラー処理の例：

  ```dart
  if (cameraPermissionDenied) {
    return const Text('カメラアクセスが拒否されています');
  }
  ```

---

このルールは `main.dart` や `generate_screen.dart`, `scan_screen.dart`、および `widgets/` 以下の再利用UI構成において、
Cursorのコード補完や説明精度を向上させる目的で常時参照される。

