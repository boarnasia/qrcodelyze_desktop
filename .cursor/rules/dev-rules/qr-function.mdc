---
description: 
globs: 
alwaysApply: false
---
---

description: QRコード生成とスキャン機能の設計・使用パッケージ・エラーハンドリング方針
ruleType: Auto Attached
globs:

* lib/widgets/qr\_display.dart
* lib/screens/generate\_screen.dart
* lib/screens/scan\_screen.dart

---

## 🔳 QRコード生成機能

* 使用パッケージ：`qr_flutter`
* 代表的なWidget：

  ```dart
  QrImage(
    data: qrData,
    version: QrVersions.auto,
    size: 200.0,
  )
  ```
* データは `TextField` の `onChanged` から即時更新する
* 空文字列やnull時のガード条件を追加すること（例：`if (qrData.isEmpty)`）

---

## 📷 QRコードスキャン機能

* カメラを使用する場合は `camera` + `qr_code_scanner` パッケージが一般的

* 画像選択には `image_picker` と `qr_code_tools`（または `google_ml_kit`）を併用可能

* 画像スキャンの例（簡略）：

  ```dart
  final pickedFile = await ImagePicker().pickImage(source: ImageSource.gallery);
  final result = await QrCodeToolsPlugin.decodeFrom(pickedFile.path);
  ```

* `isPhotoMode` に応じて処理を分岐する：

  ```dart
  if (isPhotoMode) {
    // pick image and decode
  } else {
    // show camera preview
  }
  ```

---

## ⚠️ エラーハンドリングとUX配慮

* スキャン失敗、画像選択キャンセル、読み取り不能なQRコードなどを考慮し、状態表示（例：`"スキャンに失敗しました"`）を追加すること
* スキャン成功後は `setState` で画面に反映し、結果をコピーできるUIも検討

---

このルールはQRコードの入出力に関するすべてのWidget・画面に対して自動で適用される。

